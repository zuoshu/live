package com.oneguy.live.control.wsdl;


//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.5.7.1
//
// Created by Quasar Development at 24/06/2016
//
//---------------------------------------------------


import com.oneguy.live.Constants;

import org.ksoap2.HeaderProperty;
import org.ksoap2.serialization.*;

import java.util.List;


public class lemoninfo {
    interface IWcfMethod {
        ExtendedSoapSerializationEnvelope CreateSoapEnvelope() throws Exception;

        Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope, Object result) throws Exception;
    }

    String url = Constants.SERVER_IP;

    int timeOut = 60000;
    public List<HeaderProperty> httpHeaders;
    public boolean enableLogging;

    IServiceEvents callback;

    public lemoninfo() {
    }

    public lemoninfo(IServiceEvents callback) {
        this.callback = callback;
    }

    public lemoninfo(IServiceEvents callback, String url) {
        this.callback = callback;
        this.url = url;
    }

    public lemoninfo(IServiceEvents callback, String url, int timeOut) {
        this.callback = callback;
        this.url = url;
        this.timeOut = timeOut;
    }

    public IServiceEvents getCallback() {
        return callback;
    }

    public void setCallback(IServiceEvents callback) {
        this.callback = callback;
    }

    protected org.ksoap2.transport.Transport createTransport() {
        try {
            java.net.URI uri = new java.net.URI(url);
            if (uri.getScheme().equalsIgnoreCase("https")) {
                int port = uri.getPort() > 0 ? uri.getPort() : 443;
                return new com.easywsdl.exksoap2.transport.AdvancedHttpsTransportSE(uri.getHost(), port, uri.getPath(), timeOut);
            } else {
                return new com.easywsdl.exksoap2.transport.AdvancedHttpTransportSE(url, timeOut);
            }

        } catch (java.net.URISyntaxException e) {
        }
        return null;
    }

    protected ExtendedSoapSerializationEnvelope createEnvelope() {
        ExtendedSoapSerializationEnvelope envelope = new ExtendedSoapSerializationEnvelope(ExtendedSoapSerializationEnvelope.VER11);
        return envelope;
    }

    protected List sendRequest(String methodName, ExtendedSoapSerializationEnvelope envelope, org.ksoap2.transport.Transport transport, com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile profile) throws Exception {
        if (transport instanceof com.easywsdl.exksoap2.transport.AdvancedHttpTransportSE) {
            return ((com.easywsdl.exksoap2.transport.AdvancedHttpTransportSE) transport).call(methodName, envelope, httpHeaders, null, profile);
        } else {
            return ((com.easywsdl.exksoap2.transport.AdvancedHttpsTransportSE) transport).call(methodName, envelope, httpHeaders, null, profile);
        }
    }

    Object getResult(Class destObj, Object source, String resultName, ExtendedSoapSerializationEnvelope __envelope) throws Exception {
        if (source == null) {
            return null;
        }
        if (source instanceof SoapPrimitive) {
            SoapPrimitive soap = (SoapPrimitive) source;
            if (soap.getName().equals(resultName)) {
                Object instance = __envelope.get(source, destObj);
                return instance;
            }
        } else {
            SoapObject soap = (SoapObject) source;
            if (soap.hasProperty(resultName)) {
                Object j = soap.getProperty(resultName);
                if (j == null) {
                    return null;
                }
                Object instance = __envelope.get(j, destObj);
                return instance;
            } else if (soap.getName().equals(resultName)) {
                Object instance = __envelope.get(source, destObj);
                return instance;
            }
        }

        return null;
    }


    public tagresult menus(final Integer numberid) throws Exception {
        com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile __profile = new com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile();
        return (tagresult) execute(new IWcfMethod() {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope() {
                ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("urn:lemoninfo", "menus");
                __envelope.setOutputSoapObject(__soapReq);

                PropertyInfo __info = null;
                __info = new PropertyInfo();
                __info.namespace = "";
                __info.name = "numberid";
                __info.type = PropertyInfo.INTEGER_CLASS;
                __info.setValue(numberid != null ? numberid : SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                return __envelope;
            }

            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope, Object __result) throws Exception {
                return (tagresult) getResult(tagresult.class, __result, "tagresult", __envelope);
            }
        }, "", __profile);
    }

    public android.os.AsyncTask<Void, Void, OperationResult<tagresult>> menusAsync(final Integer numberid) {
        return executeAsync(new Functions.IFunc<tagresult>() {
            public tagresult Func() throws Exception {
                return menus(numberid);
            }
        });
    }

    public tagresult opt(final String sessionid, final Integer optcode, final String opt) throws Exception {
        com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile __profile = new com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile();
        return (tagresult) execute(new IWcfMethod() {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope() {
                ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("urn:lemoninfo", "opt");
                __envelope.setOutputSoapObject(__soapReq);

                PropertyInfo __info = null;
                __info = new PropertyInfo();
                __info.namespace = "";
                __info.name = "sessionid";
                __info.type = PropertyInfo.STRING_CLASS;
                __info.setValue(sessionid != null ? sessionid : SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace = "";
                __info.name = "optcode";
                __info.type = PropertyInfo.INTEGER_CLASS;
                __info.setValue(optcode != null ? optcode : SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace = "";
                __info.name = "opt";
                __info.type = PropertyInfo.STRING_CLASS;
                __info.setValue(opt != null ? opt : SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                return __envelope;
            }

            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope, Object __result) throws Exception {
                return (tagresult) getResult(tagresult.class, __result, "tagresult", __envelope);
            }
        }, "", __profile);
    }

    public android.os.AsyncTask<Void, Void, OperationResult<tagresult>> optAsync(final String sessionid, final Integer optcode, final String opt) {
        return executeAsync(new Functions.IFunc<tagresult>() {
            public tagresult Func() throws Exception {
                return opt(sessionid, optcode, opt);
            }
        });
    }

    public String liveopt(final String token, final Integer optcode, final String optargs) throws Exception {
        com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile __profile = new com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile();
        return (String) execute(new IWcfMethod() {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope() {
                ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("urn:lemoninfo", "liveopt");
                __envelope.setOutputSoapObject(__soapReq);

                PropertyInfo __info = null;
                __info = new PropertyInfo();
                __info.namespace = "";
                __info.name = "token";
                __info.type = PropertyInfo.STRING_CLASS;
                __info.setValue(token != null ? token : SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace = "";
                __info.name = "optcode";
                __info.type = PropertyInfo.INTEGER_CLASS;
                __info.setValue(optcode != null ? optcode : SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace = "";
                __info.name = "optargs";
                __info.type = PropertyInfo.STRING_CLASS;
                __info.setValue(optargs != null ? optargs : SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                return __envelope;
            }

            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope, Object __result) throws Exception {
                SoapObject __soap = (SoapObject) __result;
                Object obj = __soap.getProperty("result");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                    SoapPrimitive j = (SoapPrimitive) obj;
                    return j.toString();
                } else if (obj != null && obj instanceof String) {
                    return (String) obj;
                }
                return null;
            }
        }, "", __profile);
    }

    public android.os.AsyncTask<Void, Void, OperationResult<String>> liveoptAsync(final String token, final Integer optcode, final String optargs) {
        return executeAsync(new Functions.IFunc<String>() {
            public String Func() throws Exception {
                return liveopt(token, optcode, optargs);
            }
        });
    }


    protected Object execute(IWcfMethod wcfMethod, String methodName, com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile profile) throws Exception {
        org.ksoap2.transport.Transport __httpTransport = createTransport();
        __httpTransport.debug = enableLogging;
        ExtendedSoapSerializationEnvelope __envelope = wcfMethod.CreateSoapEnvelope();
        try {
            sendRequest(methodName, __envelope, __httpTransport, profile);

        } finally {
            if (__httpTransport.debug) {
                if (__httpTransport.requestDump != null) {
                    android.util.Log.i("requestDump", __httpTransport.requestDump);

                }
                if (__httpTransport.responseDump != null) {
                    android.util.Log.i("responseDump", __httpTransport.responseDump);
                }
            }
        }
        Object __retObj = __envelope.bodyIn;
        if (__retObj instanceof org.ksoap2.SoapFault) {
            org.ksoap2.SoapFault __fault = (org.ksoap2.SoapFault) __retObj;
            throw convertToException(__fault, __envelope);
        } else {
            return wcfMethod.ProcessResult(__envelope, __retObj);
        }
    }

    protected <T> android.os.AsyncTask<Void, Void, OperationResult<T>> executeAsync(final Functions.IFunc<T> func) {
        return new android.os.AsyncTask<Void, Void, OperationResult<T>>() {
            @Override
            protected void onPreExecute() {
                callback.Starting();
            }

            ;

            @Override
            protected OperationResult<T> doInBackground(Void... params) {
                OperationResult<T> result = new OperationResult<T>();
                try {
                    result.Result = func.Func();
                } catch (Exception ex) {
                    ex.printStackTrace();
                    result.Exception = ex;
                }
                return result;
            }

            @Override
            protected void onPostExecute(OperationResult<T> result) {
                callback.Completed(result);
            }
        }.execute();
    }

    Exception convertToException(org.ksoap2.SoapFault fault, ExtendedSoapSerializationEnvelope envelope) {

        return new Exception(fault.faultstring);
    }
}


